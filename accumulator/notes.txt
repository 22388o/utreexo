New swapless deletion:

Trees are a bit different; since nothing even moves left/right, the number of trees is determined by total additions ever.  Number of "leaves" is still number of utxos, because leaves can move up.  So leaves are no longer just on the bottom row.  A leaf is just a node without any children.  It can't go *below* the tree height, but it doesn't have to be on the bottom.

Leaf: node without children
Root: node without sibling

All nodes have siblings unless they're a root, and all nodes have either 2 or 0 children (this is saying the same thing...)

Deletion is promotion.  Example with an 8-tree

14
|---------------\
12              13
|-------\       |-------\
08      09      10      11
|---\   |---\   |---\   |---\
00  01  02  03  04  05  06  07

Delete 05

14
|---------------\
12              13
|-------\       |-------\
08      09      04      11
|---\   |---\           |---\
00  01  02  03          06  07

overwrite 10 with 04.  That was easy.  Harder operations.  Now delete 06 and 07 at the same time.
You *could* do them separately.  That would be first deleting 06

14
|---------------\
12              13
|-------\       |-------\
08      09      04      07
|---\   |---\           
00  01  02  03          

Then deleting 07

14
|---------------\
12              04
|-------\      
08      09     
|---\   |---\            
00  01  02  03   

But instead we should do them both at once, and just delete 11 to start with.  This is handled by raiseTwins()

Delete 00, 01, 04.  That just moves 09 to 14.  raiseTwins() will turn 00, 01, 04 into 08, 04

but given this setup:

14
|---------------\
12              13
|-------\        
08      09      
|---\   |---\
00  01  02  03

and 08, 13, how do you jump to "move subtree 09 to position 14"?  

Another way to say that though is "09 up 2"...
